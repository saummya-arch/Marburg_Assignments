package container;

import util.ContainerRuntimeException;
import util.MetaData;

import java.util.NoSuchElementException;

/**
 * A container manages a set of key-value pairs similar to {@link java.util.Map}. Unlike a map,
 * the key values are generated by the container. Besides the actual data, every container also 
 * provides space to store additional metadata ({@link #getMetaData()}. This space may be used to
 * store the Key of the root node of a tree for example. 
 *
 * @param <Key> The key type, used to access the entries
 * @param <Value> The value type
 */
public interface Container<Key, Value> extends AutoCloseable {
	
	/** 
	 * The instance returned by this method may be used to store additional metadata.
	 * @return The meta information stored along with this container.
	 * @throws IllegalStateException If this operation is invoked on a closed container.
	 */
	MetaData getMetaData() throws IllegalStateException;
	
	/**
	 * Opens this container. Any call to other methods of this interface 
	 * should fail if the container was not opened before. Repeated calls to
	 * open should have no effect, while calling open after a preceeding call to 
	 * {@link #close()} should re-open the container. 
	 * @throws ContainerRuntimeException On any error encountered when opening the container
	 */
	void open() throws ContainerRuntimeException;
	
	/**
	 * Closes this container. After a container is closed, any call to methods other 
	 * than {@link #open()} should fail. Repeated calls to close should have no effect.
	 * @throws ContainerRuntimeException On any error encountered when opening the container
	 */
	void close() throws ContainerRuntimeException;
	
	/**
	 * Reserves a key which may be used for subsequent update operations. 
	 * @return A new unused key
	 * @throws IllegalStateException If this operation is invoked on a closed container.
	 */
	Key reserve() throws IllegalStateException;
	
	/**
	 * Updates the value stored for the given key.
	 * @param key The key to update the value for.
	 * @param value The new value to store.
	 * @throws NoSuchElementException If no value was store for the given key and the key 
	 * 			was not obtained by a previous reserved operation.
	 * @throws IllegalStateException If this operation is invoked on a closed container.
	 */
	void update(Key key, Value value) throws NoSuchElementException, IllegalStateException;
	
	/**
	 * Inserts the given value into this container and returns the key to be used for 
	 * subsequent fetch operations.
	 * @param value The value to store
	 * @return The key to retrieve the element with.
	 * @throws IllegalStateException If this operation is invoked on a closed container.
	 */
	default Key insert(Value value) throws IllegalStateException {
		Key key = reserve();
		update(key, value);
		return key;
	}
	
	/**
	 * Retrieves a value previously stored for the given key.
	 * @param key The key obtained when inserting the value.
	 * @return The value for the given key
	 * @throws NoSuchElementException If no value was stored for the given key.
	 * @throws IllegalStateException If this operation is invoked on a closed container.
	 */
	Value get(Key key) throws NoSuchElementException, IllegalStateException;
	
	/**
	 * Removes the value for the given key.
	 * @param key The key of the value to remove.
	 * @throws NoSuchElementException If no value was store for the given key.
	 * @throws IllegalStateException If this operation is invoked on a closed container.
	 */
	void remove(Key key) throws NoSuchElementException, IllegalStateException;

}
